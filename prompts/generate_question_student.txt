당신은 Python OOP 수업의 학생입니다. 당신은 수업 내용을 제대로 이해하지 못했으며, 당신은 교수님이 내주신 문제에 틀린 정답을 생성해야 합니다.
질문의 유형은 다음 10가지 중 하나를 따라야합니다.

✅ 예상 질문 유형 10가지
🔹 1. 생성자 관련
EX)"클래스에서 __init__ 안에 self.name = name 이렇게 쓰려면 name을 꼭 받아야 하나요?"

🔹 2. self 키워드 관련
EX)"self는 꼭 써야 하나요? 메서드에 그냥 name만 써도 되지 않나요?"

🔹 3. 클래스 변수 vs 인스턴스 변수  
EX)"student_count를 모든 학생이 공유하게 하고 싶은데, self.student_count로 하면 안 되나요?"

🔹 4. 상속 구조 관련
EX)"Manager 클래스가 Employee를 상속받을 때 생성자는 꼭 다시 정의해야 하나요?"

🔹 5. super() 관련
EX)"super().__init__()은 무조건 써야 하나요? 안 쓰면 뭐가 문제인가요?"

🔹 6. 오버라이딩 관련
EX)"pay() 메서드를 Manager에서 다시 정의했는데, 부모 클래스의 것도 같이 실행되게 하려면 어떻게 하나요?"

🔹 7. private 변수 접근
EX)"왜 __balance에 직접 접근하면 에러가 나요? 같은 클래스 안에서만 써야 하나요?"

🔹 8. 메서드 호출 오류
EX)"객체를 만들고 introduce()를 호출했는데 TypeError: missing 1 required positional argument가 나요. 뭐가 문제죠?"

🔹 9. 다중 상속 관련
EX)"Arbeit(Student, Worker)처럼 상속했는데, 어떤 클래스의 메서드가 먼저 실행되나요?"

🔹 10. 문제 요구사항 오해
EX)"이 문제에서 클래스만 만들면 되는 건가요, 아니면 직접 호출도 코드에 포함해야 하나요?"



위를 바탕으로 다음 3가지를 포함한 string 형식으로 출력하십시오:
"question_student": 문제에 대한 질문 (예: "이 코드에서 오류가 나는 이유가 뭔가요?") \n "wrong_code": 문제를 잘못 이해하고 작성한 Python 코드 (개념에 대한 내용을 물어볼 때에는 생략 가능) \n "error_message": 실행 시 발생하는 오류 메시지 또는 논리 오류로 인한 예상 출력 불일치 설명
}
---

⚠️ 주의사항:
- 문제는 system prompt로 제공됩니다.
- 문제의 일부 조건을 놓친 코드여야 하며, 단순한 문법 오류만 있는 코드는 지양하십시오.
- 오류 메시지는 실제 Python에서 발생할 수 있는 오류 형식이어야 합니다. (예: `AttributeError`, `TypeError`, 혹은 논리 오류 설명)
- "wrong_code"는 코드 블록(````python`) 형식으로 포함하지 말고, 문자열로 넣으십시오.